{"version":3,"file":"react-stack-layout.cjs.production.min.js","sources":["../src/utils.ts","../src/ColumnStack.tsx","../src/Stack.tsx","../src/RowStack.tsx","../src/Container.tsx"],"sourcesContent":["import React from 'react'\n\nexport enum StackTypes {\n  Stack = 'Stack',\n  RowStack = 'RowStack',\n  ColumnStack = 'ColumnStack',\n  Container = 'Container',\n}\n\nexport type Children = React.ReactElement | React.ReactElement[]\n\nexport const validateChildren = (children: React.ReactElement[]) => {\n  let containers = 0\n  return (\n    children.every((child: any) => {\n      if (child.type.name === StackTypes.Container) {\n        containers++\n        return containers < 1\n      }\n      return StackTypes[child.type.name]\n    })\n  )\n}\n","import React from 'react'\nimport { StackTypes } from './utils'\n\ntype Props = React.PropsWithChildren<{}>\n\nexport const ColumnStack = ({ children }: Props) => {\n  return <div>{children}</div>\n}\n\nColumnStack.displayName = StackTypes.ColumnStack\n","import React from 'react'\nimport { StackTypes, validateChildren } from './utils'\n\ntype Props = {\n  children: React.ReactElement | React.ReactElement[]\n}\n\nexport const Stack = ({ children }: Props) => {\n  const childrenArray = Array.isArray(children)\n    ? children\n    : children\n    ? [children]\n    : []\n\n  console.log(validateChildren(childrenArray))\n  return (\n    <div\n      style={{\n        display: 'inline-block',\n        width: '100%',\n        height: '100%',\n        backgroundColor: 'black',\n        color: 'white',\n      }}\n    >\n      {children}\n    </div>\n  )\n}\n\nStack.displayName = StackTypes.Stack\n","import React from 'react'\nimport { StackTypes } from './utils'\n\ntype Props = React.PropsWithChildren<{}>\n\nexport const RowStack = ({ children }: Props) => {\n  return <div>{children}</div>\n}\n\nRowStack.displayName = StackTypes.RowStack","import React from 'react'\nimport { StackTypes } from './utils'\n\ntype Props = React.PropsWithChildren<{\n  id?: string\n  component: React.ComponentType\n  isVisible: boolean\n  props?: any\n}>\n\nexport const Container = ({ isVisible, component: Comp, children }: Props) => {\n  return isVisible ? <div>{Comp ? <Comp /> : children}</div> : null\n}\n\nContainer.defaultProps = {\n  isVisible: true,\n}\n\nContainer.displayName = StackTypes.Container"],"names":["StackTypes","ColumnStack","React","children","displayName","Stack","containers","childrenArray","Array","isArray","console","log","every","child","type","name","Container","style","display","width","height","backgroundColor","color","RowStack","Comp","component","isVisible","defaultProps"],"mappings":"mBAEYA,yEAAZ,SAAYA,GACVA,gBACAA,sBACAA,4BACAA,wBAJF,CAAYA,IAAAA,OASL,ICNMC,EAAc,mBAClBC,6BADqBC,WAI9BF,EAAYG,YAAcJ,EAAWC,gBCFxBI,EAAQ,gBFKfC,EELkBH,IAAAA,SAChBI,EAAgBC,MAAMC,QAAQN,GAChCA,EACAA,EACA,CAACA,GACD,UAEJO,QAAQC,KFFJL,EAAa,EEEYC,EFAlBK,MAAM,SAACC,UACVA,EAAMC,KAAKC,OAASf,EAAWgB,YACjCV,EACoB,EAEfN,EAAWa,EAAMC,KAAKC,UEH/Bb,uBACEe,MAAO,CACLC,QAAS,eACTC,MAAO,OACPC,OAAQ,OACRC,gBAAiB,QACjBC,MAAO,UAGRnB,IAKPE,EAAMD,YAAcJ,EAAWK,UCzBlBkB,EAAW,mBACfrB,6BADkBC,WAI3BoB,EAASnB,YAAcJ,EAAWuB,aCCrBP,EAAY,gBAAyBQ,IAAXC,UAAiBtB,IAAAA,kBAA5BuB,UACPxB,2BAAMsB,EAAOtB,gBAACsB,QAAUrB,GAAkB,MAG/Da,EAAUW,aAAe,CACvBD,WAAW,GAGbV,EAAUZ,YAAcJ,EAAWgB"}