{"version":3,"file":"react-stack-layout.cjs.development.js","sources":["../src/utils.ts","../src/ColumnStack.tsx","../src/Stack.tsx","../src/RowStack.tsx","../src/Container.tsx"],"sourcesContent":["import React from 'react'\n\nexport enum StackTypes {\n  Stack = 'Stack',\n  RowStack = 'RowStack',\n  ColumnStack = 'ColumnStack',\n  Container = 'Container',\n}\n\nexport type Children = React.ReactElement | React.ReactElement[]\n\nexport const validateChildren = (children: React.ReactElement[]) => {\n  let containers = 0\n  return (\n    children.every((child: any) => {\n      if (child.type.name === StackTypes.Container) {\n        containers++\n        return containers < 1\n      }\n      return StackTypes[child.type.name]\n    })\n  )\n}\n","import React from 'react'\nimport { StackTypes } from './utils'\n\ntype Props = React.PropsWithChildren<{}>\n\nexport const ColumnStack = ({ children }: Props) => {\n  return <div>{children}</div>\n}\n\nColumnStack.displayName = StackTypes.ColumnStack\n","import React from 'react'\nimport { StackTypes, validateChildren } from './utils'\n\ntype Props = {\n  children: React.ReactElement | React.ReactElement[]\n}\n\nexport const Stack = ({ children }: Props) => {\n  const childrenArray = Array.isArray(children)\n    ? children\n    : children\n    ? [children]\n    : []\n\n  console.log(validateChildren(childrenArray))\n  return (\n    <div\n      style={{\n        display: 'inline-block',\n        width: '100%',\n        height: '100%',\n        backgroundColor: 'black',\n        color: 'white',\n      }}\n    >\n      {children}\n    </div>\n  )\n}\n\nStack.displayName = StackTypes.Stack\n","import React from 'react'\nimport { StackTypes } from './utils'\n\ntype Props = React.PropsWithChildren<{}>\n\nexport const RowStack = ({ children }: Props) => {\n  return <div>{children}</div>\n}\n\nRowStack.displayName = StackTypes.RowStack","import React from 'react'\nimport { StackTypes } from './utils'\n\ntype Props = React.PropsWithChildren<{\n  id?: string\n  component: React.ComponentType\n  isVisible: boolean\n  props?: any\n}>\n\nexport const Container = ({ isVisible, component: Comp, children }: Props) => {\n  return isVisible ? <div>{Comp ? <Comp /> : children}</div> : null\n}\n\nContainer.defaultProps = {\n  isVisible: true,\n}\n\nContainer.displayName = StackTypes.Container"],"names":["StackTypes","validateChildren","children","containers","every","child","type","name","Container","ColumnStack","React","displayName","Stack","childrenArray","Array","isArray","console","log","style","display","width","height","backgroundColor","color","RowStack","isVisible","Comp","component","defaultProps"],"mappings":";;;;;;AAEA,IAAYA,UAAZ;;AAAA,WAAYA;EACVA,mBAAA,UAAA;EACAA,sBAAA,aAAA;EACAA,yBAAA,gBAAA;EACAA,uBAAA,cAAA;CAJF,EAAYA,UAAU,KAAVA,UAAU,KAAA,CAAtB;;AASA,AAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,QAAD;MAC1BC,UAAU,GAAG,CAAjB;SAEED,QAAQ,CAACE,KAAT,CAAe,UAACC,KAAD;QACTA,KAAK,CAACC,IAAN,CAAWC,IAAX,KAAoBP,UAAU,CAACQ,SAAnC,EAA8C;MAC5CL,UAAU;aACHA,UAAU,GAAG,CAApB;;;WAEKH,UAAU,CAACK,KAAK,CAACC,IAAN,CAAWC,IAAZ,CAAjB;GALF,CADF;CAFK;;ICNME,WAAW,GAAG,SAAdA,WAAc;MAAGP,gBAAAA;SACrBQ,mBAAA,MAAA,MAAA,EAAMR,QAAN,CAAP;CADK;AAIPO,WAAW,CAACE,WAAZ,GAA0BX,UAAU,CAACS,WAArC;;ICFaG,KAAK,GAAG,SAARA,KAAQ;MAAGV,gBAAAA;MAChBW,aAAa,GAAGC,KAAK,CAACC,OAAN,CAAcb,QAAd,IAClBA,QADkB,GAElBA,QAAQ,GACR,CAACA,QAAD,CADQ,GAER,EAJJ;EAMAc,OAAO,CAACC,GAAR,CAAYhB,gBAAgB,CAACY,aAAD,CAA5B;SAEEH,mBAAA,MAAA;IACEQ,KAAK,EAAE;MACLC,OAAO,EAAE,cADJ;MAELC,KAAK,EAAE,MAFF;MAGLC,MAAM,EAAE,MAHH;MAILC,eAAe,EAAE,OAJZ;MAKLC,KAAK,EAAE;;GANX,EASGrB,QATH,CADF;CARK;AAuBPU,KAAK,CAACD,WAAN,GAAoBX,UAAU,CAACY,KAA/B;;ICzBaY,QAAQ,GAAG,SAAXA,QAAW;MAAGtB,gBAAAA;SAClBQ,mBAAA,MAAA,MAAA,EAAMR,QAAN,CAAP;CADK;AAIPsB,QAAQ,CAACb,WAAT,GAAuBX,UAAU,CAACwB,QAAlC;;ICCahB,SAAS,GAAG,SAAZA,SAAY;MAAGiB,iBAAAA;MAAsBC,YAAXC;MAAiBzB,gBAAAA;SAC/CuB,SAAS,GAAGf,mBAAA,MAAA,MAAA,EAAMgB,IAAI,GAAGhB,mBAAA,CAACgB,IAAD,MAAA,CAAH,GAAcxB,QAAxB,CAAH,GAA6C,IAA7D;CADK;AAIPM,SAAS,CAACoB,YAAV,GAAyB;EACvBH,SAAS,EAAE;CADb;AAIAjB,SAAS,CAACG,WAAV,GAAwBX,UAAU,CAACQ,SAAnC;;;;;;;"}